// Generated by using Rcpp::compileAttributes() -> do not edit by hand
// Generator token: 10BE3573-1514-4C36-9D1C-5A225CD40393

#include <Rcpp.h>

using namespace Rcpp;

#ifdef RCPP_USE_GLOBAL_ROSTREAM
Rcpp::Rostream<true>&  Rcpp::Rcout = Rcpp::Rcpp_cout_get();
Rcpp::Rostream<false>& Rcpp::Rcerr = Rcpp::Rcpp_cerr_get();
#endif

// FR_get_output
Rcpp::List FR_get_output();
RcppExport SEXP _funfit_FR_get_output() {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    rcpp_result_gen = Rcpp::wrap(FR_get_output());
    return rcpp_result_gen;
END_RCPP
}
// FR_set_state
void FR_set_state(Rcpp::NumericVector new_state);
RcppExport SEXP _funfit_FR_set_state(SEXP new_stateSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::NumericVector >::type new_state(new_stateSEXP);
    FR_set_state(new_state);
    return R_NilValue;
END_RCPP
}
// FR_get_state
std::vector<double> FR_get_state();
RcppExport SEXP _funfit_FR_get_state() {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    rcpp_result_gen = Rcpp::wrap(FR_get_state());
    return rcpp_result_gen;
END_RCPP
}
// FR_reset_observer
void FR_reset_observer();
RcppExport SEXP _funfit_FR_reset_observer() {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    FR_reset_observer();
    return R_NilValue;
END_RCPP
}
// FR_adap
Rcpp::List FR_adap(Rcpp::NumericVector init, double duration, double step_size, double start);
RcppExport SEXP _funfit_FR_adap(SEXP initSEXP, SEXP durationSEXP, SEXP step_sizeSEXP, SEXP startSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::NumericVector >::type init(initSEXP);
    Rcpp::traits::input_parameter< double >::type duration(durationSEXP);
    Rcpp::traits::input_parameter< double >::type step_size(step_sizeSEXP);
    Rcpp::traits::input_parameter< double >::type start(startSEXP);
    rcpp_result_gen = Rcpp::wrap(FR_adap(init, duration, step_size, start));
    return rcpp_result_gen;
END_RCPP
}
// FR_at
Rcpp::List FR_at(Rcpp::NumericVector init, std::vector<double> times, double step_size, double start);
RcppExport SEXP _funfit_FR_at(SEXP initSEXP, SEXP timesSEXP, SEXP step_sizeSEXP, SEXP startSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::NumericVector >::type init(initSEXP);
    Rcpp::traits::input_parameter< std::vector<double> >::type times(timesSEXP);
    Rcpp::traits::input_parameter< double >::type step_size(step_sizeSEXP);
    Rcpp::traits::input_parameter< double >::type start(startSEXP);
    rcpp_result_gen = Rcpp::wrap(FR_at(init, times, step_size, start));
    return rcpp_result_gen;
END_RCPP
}
// FR_continue_at
Rcpp::List FR_continue_at(std::vector<double> times, double step_size);
RcppExport SEXP _funfit_FR_continue_at(SEXP timesSEXP, SEXP step_sizeSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< std::vector<double> >::type times(timesSEXP);
    Rcpp::traits::input_parameter< double >::type step_size(step_sizeSEXP);
    rcpp_result_gen = Rcpp::wrap(FR_continue_at(times, step_size));
    return rcpp_result_gen;
END_RCPP
}
// FR
Rcpp::List FR(Rcpp::NumericVector init, double duration, double step_size, double start);
RcppExport SEXP _funfit_FR(SEXP initSEXP, SEXP durationSEXP, SEXP step_sizeSEXP, SEXP startSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::NumericVector >::type init(initSEXP);
    Rcpp::traits::input_parameter< double >::type duration(durationSEXP);
    Rcpp::traits::input_parameter< double >::type step_size(step_sizeSEXP);
    Rcpp::traits::input_parameter< double >::type start(startSEXP);
    rcpp_result_gen = Rcpp::wrap(FR(init, duration, step_size, start));
    return rcpp_result_gen;
END_RCPP
}
// FR_no_record
std::vector<double> FR_no_record(Rcpp::NumericVector init, double duration, double step_size, double start);
RcppExport SEXP _funfit_FR_no_record(SEXP initSEXP, SEXP durationSEXP, SEXP step_sizeSEXP, SEXP startSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::NumericVector >::type init(initSEXP);
    Rcpp::traits::input_parameter< double >::type duration(durationSEXP);
    Rcpp::traits::input_parameter< double >::type step_size(step_sizeSEXP);
    Rcpp::traits::input_parameter< double >::type start(startSEXP);
    rcpp_result_gen = Rcpp::wrap(FR_no_record(init, duration, step_size, start));
    return rcpp_result_gen;
END_RCPP
}
// FR_set_params
void FR_set_params(double Fmax, double N0, double q, double P);
RcppExport SEXP _funfit_FR_set_params(SEXP FmaxSEXP, SEXP N0SEXP, SEXP qSEXP, SEXP PSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< double >::type Fmax(FmaxSEXP);
    Rcpp::traits::input_parameter< double >::type N0(N0SEXP);
    Rcpp::traits::input_parameter< double >::type q(qSEXP);
    Rcpp::traits::input_parameter< double >::type P(PSEXP);
    FR_set_params(Fmax, N0, q, P);
    return R_NilValue;
END_RCPP
}
// FR_get_params
Rcpp::List FR_get_params();
RcppExport SEXP _funfit_FR_get_params() {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    rcpp_result_gen = Rcpp::wrap(FR_get_params());
    return rcpp_result_gen;
END_RCPP
}

static const R_CallMethodDef CallEntries[] = {
    {"_funfit_FR_get_output", (DL_FUNC) &_funfit_FR_get_output, 0},
    {"_funfit_FR_set_state", (DL_FUNC) &_funfit_FR_set_state, 1},
    {"_funfit_FR_get_state", (DL_FUNC) &_funfit_FR_get_state, 0},
    {"_funfit_FR_reset_observer", (DL_FUNC) &_funfit_FR_reset_observer, 0},
    {"_funfit_FR_adap", (DL_FUNC) &_funfit_FR_adap, 4},
    {"_funfit_FR_at", (DL_FUNC) &_funfit_FR_at, 4},
    {"_funfit_FR_continue_at", (DL_FUNC) &_funfit_FR_continue_at, 2},
    {"_funfit_FR", (DL_FUNC) &_funfit_FR, 4},
    {"_funfit_FR_no_record", (DL_FUNC) &_funfit_FR_no_record, 4},
    {"_funfit_FR_set_params", (DL_FUNC) &_funfit_FR_set_params, 4},
    {"_funfit_FR_get_params", (DL_FUNC) &_funfit_FR_get_params, 0},
    {NULL, NULL, 0}
};

RcppExport void R_init_funfit(DllInfo *dll) {
    R_registerRoutines(dll, NULL, CallEntries, NULL, NULL);
    R_useDynamicSymbols(dll, FALSE);
}
